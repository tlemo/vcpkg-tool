# This script is used internally to produce signed vcpkg builds.
# It uses machines / tasks that are not exposed here on GitHub, as
# the hardware on which we allow signing is restricted.

trigger: none

parameters:
- name: SignTypeOverride
  displayName: Signing Type Override
  type: string
  default: default
  values:
  - default
  - test
  - real

variables:
  VCPKG_BASE_VERSION: $[format('{0:yyyy}-{0:MM}-{0:dd}', pipeline.startTime)]
  TeamName: vcpkg
  # If the user didn't override the signing type, then only real-sign on main.
  ${{ if ne(parameters.SignTypeOverride, 'default') }}:
    SignType: ${{ parameters.SignTypeOverride }}
  ${{ if and(eq(parameters.SignTypeOverride, 'default'), or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))) }}:
    SignType: real
  ${{ if and(eq(parameters.SignTypeOverride, 'default'), not(or(eq(variables['Build.SourceBranchName'], 'main'), startsWith(variables['Build.SourceBranch'], 'refs/tags')))) }}:
    SignType: test

jobs:
  - job: macos_build
    displayName: 'MacOS Build'
    pool:
      vmImage: macOS-11
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output ./fmtlib.tar.gz
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          shasum -c ./checksum -a 512 || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" -B "$(Build.BinariesDirectory)/build"
          make -j 8 -C "$(Build.BinariesDirectory)/build"
          zip -j "$(Build.ArtifactStagingDirectory)/vcpkg-macos.zip" "$(Build.BinariesDirectory)/build/vcpkg"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned MacOS Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: rhel_build
    displayName: 'glibc (RHEL) Build'
    pool:
      name: 'vcpkg-rhel-7-5'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output "./fmtlib.tar.gz"
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          # shasum doesn't exist on rhel
          sha512sum -c ./checksum || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg with CMake"
      inputs:
        failOnStderr: true
        script: |
          scl enable devtoolset-9 'cmake3 -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_EMBED_GIT_SHA=ON -DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" -DVCPKG_BASE_VERSION=$(VCPKG_BASE_VERSION) -B "$(Build.BinariesDirectory)/build"'
          make -j 4 -C "$(Build.BinariesDirectory)/build"
          mv "$(Build.BinariesDirectory)/build/vcpkg" "$(Build.ArtifactStagingDirectory)/vcpkg-glibc"
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned glibc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: muslc_build
    displayName: 'muslc (Alpine) Build'
    pool:
      name: 'vcpkg-ubuntu-20-04-docker'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
    - task: CmdLine@2
      displayName: "Download fmt library"
      inputs:
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl -sSL "$FMT_TARBALL_URL" --output "./fmtlib.tar.gz"
          printf "$FMT_TARBALL_SHA *./fmtlib.tar.gz\n" >checksum
          shasum -c ./checksum -a 512 || exit 1
          tar -xf ./fmtlib.tar.gz
    - task: CmdLine@2
      displayName: "Build vcpkg in Alpine"
      inputs:
        failOnStderr: true
        script: |
          mv "$(Build.BinariesDirectory)/$FMT_TARBALL_DIRNAME" external-fmtlib
          docker build -t vcpkg-muslc-image -f azure-pipelines/vcpkg-alpine/Dockerfile .
          docker create -ti --name vcpkg-muslc-container vcpkg-muslc-image sh
          docker cp vcpkg-muslc-container:/build/vcpkg "$(Build.ArtifactStagingDirectory)/vcpkg-muslc"
          docker container rm vcpkg-muslc-container
          docker image rm vcpkg-muslc-image
    - task: PublishBuildArtifacts@1
      displayName: "Publish Unsigned muslc Binary"
      inputs:
        ArtifactName: 'staging'
        publishLocation: 'Container'
  - job: windows_and_sign
    displayName: 'Build Windows and Sign Other Platforms'
    dependsOn:
      - macos_build
      - rhel_build
      - muslc_build
    pool:
      name: 'VSEngSS-MicroBuild2022-1ES'
    variables:
    - group: vcpkg-dependency-source-blobs
    - name: FMT_TARBALL_URL
      value: "$(fmt-tarball-url)"
    - name: FMT_TARBALL_SHA
      value: "$(fmt-tarball-sha)"
    - name: FMT_TARBALL_DIRNAME
      value: "$(fmt-tarball-dirname)"
    steps:
      # Download all dependencies and sources
    - task: PowerShell@2
      displayName: 'Download vcpkg-ce sources'
      inputs:
        targetType: 'inline'
        script: |
          $sha = Get-Content azure-pipelines/vcpkg-ce-sha.txt -Raw
          $sha = $sha.Trim()
          curl.exe -L -o vcpkg-ce.zip "https://github.com/microsoft/vcpkg-ce/archive/$sha.zip"
          tar xf vcpkg-ce.zip
          mv "vcpkg-ce-$sha" vcpkg-ce
        pwsh: true
    - task: PowerShell@2
      displayName: "Download fmt library"
      inputs:
        targetType: 'inline'
        pwsh: true
        failOnStderr: true
        workingDirectory: "$(Build.BinariesDirectory)"
        script: |
          curl.exe -sSL "$env:FMT_TARBALL_URL" --output ./fmtlib.tar.gz
          $hash = (Get-FileHash -Algorithm SHA512 -Path ./fmtlib.tar.gz).Hash
          if ($hash -ne "$env:FMT_TARBALL_SHA") {
            throw "Unexpected hash for fmtlib download;
            expected: $env:FMT_TARBALL_SHA
            found   : $hash"
          }
          tar.exe -xf ./fmtlib.tar.gz
    - task: Powershell@2
      displayName: 'Build vcpkg-readonly-bundle.tar.gz'
      inputs:
        pwsh: true
        filePath: azure-pipelines/mint-readonly-bundle.ps1
        arguments: '-DestinationTarballName "$(Build.BinariesDirectory)\vcpkg-readonly-bundle.tar.gz" -BundleConfig azure-pipelines/readonly-bundleconfig.json -TempPath readonly-temp'
    # Policy enforcement
    - task: PoliCheck@1
      inputs:
        inputType: 'Basic'
        targetType: 'F'
        targetArgument: '$(Build.SourcesDirectory)'
        result: 'PoliCheck.xml'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
      displayName: Run CredScan
      inputs:
        toolMajorVersion: V2
    # Build vcpkg binaries
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Unsigned POSIX Binaries'
      inputs:
        artifactName: staging
    - task: CmdLine@2
      displayName: 'Move Linux Binaries to BinariesDirectory'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.BinariesDirectory)\build"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.BinariesDirectory)\vcpkg-glibc"
          copy /Y "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.BinariesDirectory)\vcpkg-muslc"
    - task: CmdLine@2
      displayName: "Build vcpkg x86 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x86 -host_arch=x86
          cmake.exe --version
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)\%FMT_TARBALL_DIRNAME%" -DVCPKG_BASE_VERSION=%VCPKG_BASE_VERSION% -B "$(Build.BinariesDirectory)\x86"
          ninja.exe -C "$(Build.BinariesDirectory)\x86"
    - task: CmdLine@2
      displayName: "Build vcpkg arm64 with CMake"
      inputs:
        failOnStderr: true
        script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x86
          cmake.exe --version
          cmake.exe -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DVCPKG_DEVELOPMENT_WARNINGS=ON -DVCPKG_WARNINGS_AS_ERRORS=ON -DVCPKG_BUILD_FUZZING=OFF -DVCPKG_BUILD_TLS12_DOWNLOADER=ON -DVCPKG_EMBED_GIT_SHA=ON -DVCPKG_PDB_SUFFIX="-arm64" -DFETCHCONTENT_FULLY_DISCONNECTED=ON "-DFETCHCONTENT_SOURCE_DIR_FMT=$(Build.BinariesDirectory)\%FMT_TARBALL_DIRNAME%" -DVCPKG_BASE_VERSION=%VCPKG_BASE_VERSION% -B "$(Build.BinariesDirectory)\arm64"
          ninja.exe -C "$(Build.BinariesDirectory)\arm64"
    # Build and test vcpkg-ce
    - task: UseNode@1
      displayName: Use Node 16 or later
      inputs:
        version: "16.x"
    - script: npm install -g @microsoft/rush
      displayName: Install Rush
      workingDirectory: vcpkg-ce
    - script: rush update
      displayName: Install vcpkg-ce Dependencies
      workingDirectory: vcpkg-ce
    - script: rush lint
      displayName: Check vcpkg-ce for Linting Errors
      workingDirectory: vcpkg-ce
    - script: rush rebuild
      displayName: Build vcpkg-ce Packages
      workingDirectory: vcpkg-ce
    - script: rush test
      displayName: Run vcpkg-ce Tests
      workingDirectory: vcpkg-ce
    - script: |
        rush set-versions
        node -e "const c = require('./ce/package.json'); p = require('./assets/package.json') ; p.version = c.version; require('fs').writeFileSync('./assets/package.json', JSON.stringify(p,undefined,2)); console.log(``set asset version to `${p.version}``);"
      displayName: Set vcpkg-ce Package Versions
      workingDirectory: vcpkg-ce
    - script: mkdir "$(Build.BinariesDirectory)\vcpkg-ce" && rush deploy -t "$(Build.BinariesDirectory)\vcpkg-ce"
      displayName: Collect dependencies
      workingDirectory: vcpkg-ce
    - task: ComponentGovernanceComponentDetection@0
      displayName: Detect Components
      inputs:
        ignoreDirectories: vcpkg-ce/common/temp
    - task: MicroBuildSigningPlugin@3
      displayName: Install MicroBuild Signing
      inputs:
        signType: $(SignType)
        zipSources: false
        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 5.7
    - task: NuGetCommand@2
      displayName: 'NuGet Restore MicroBuild Signing Extension'
      inputs:
        command: 'restore'
        restoreSolution: 'azure-pipelines/signing.signproj'
        feedsToUse: 'config'
        restoreDirectory: '$(Build.SourcesDirectory)\packages'
    - task: MSBuild@1
      displayName: 'Sign Individual Files'
      inputs:
        solution: 'azure-pipelines\signing.signproj'
        msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory)\ /p:IntermediateOutputPath=$(Build.BinariesDirectory)\'
    - task: MicroBuildSignMacFiles@1
      displayName: 'Developer Sign Mac Files'
      condition: and(eq(variables.SignType, 'test'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: 8003
    - task: MicroBuildSignMacFiles@1
      displayName: 'Sign and Harden Mac Files'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: 8023
    - task: MicroBuildSignMacFiles@1
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        SigningTarget: '$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip'
        SigningCert: '8020'
        MacAppName: 'vcpkg'
    - task: BinSkim@3
      inputs:
        InputType: 'CommandLine'
        arguments: 'analyze "$(Build.BinariesDirectory)\x86\vcpkg.exe" "$(Build.BinariesDirectory)\x86\tls12-download.exe" "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.BinariesDirectory)\arm64\tls12-download.exe"'
    # Inject the NOTICE file. This must run after component detection.
    - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
      displayName: Generate NOTICE file
      inputs:
        outputfile: $(Build.BinariesDirectory)/vcpkg-ce/NOTICE.txt
    - script: npm pack
      displayName: Create vcpkg-ce Pack
      workingDirectory: $(Build.BinariesDirectory)/vcpkg-ce
    - task: CmdLine@2
      displayName: 'Arrange Binaries in Drop'
      inputs:
        failOnStderr: true
        script: |
          mkdir "$(Build.ArtifactStagingDirectory)\drop"

          move "$(Build.BinariesDirectory)\vcpkg-ce\vcpkg-ce-*.tgz" "$(Build.ArtifactStagingDirectory)\drop\ce.tgz"
          move "$(Build.BinariesDirectory)\vcpkg-readonly-bundle.tar.gz" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-readonly-bundle.tar.gz"

          move "$(Build.BinariesDirectory)\x86\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.exe"
          move "$(Build.BinariesDirectory)\x86\vcpkg.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg.pdb"
          move "$(Build.BinariesDirectory)\x86\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.exe"
          move "$(Build.BinariesDirectory)\x86\tls12-download.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download.pdb"
          move "$(Build.BinariesDirectory)\arm64\vcpkg.exe" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\vcpkg-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-arm64.pdb"
          move "$(Build.BinariesDirectory)\arm64\tls12-download.exe" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.exe"
          move "$(Build.BinariesDirectory)\arm64\tls12-download-arm64.pdb" "$(Build.ArtifactStagingDirectory)\drop\tls12-download-arm64.pdb"

          mkdir "$(Build.ArtifactStagingDirectory)\staging\macos"
          tar.exe -C "$(Build.ArtifactStagingDirectory)\staging\macos" -xf "$(Build.ArtifactStagingDirectory)\staging\vcpkg-macos.zip"
          move "$(Build.ArtifactStagingDirectory)\staging\macos\vcpkg" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-macos"

          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc"

          move "$(Build.ArtifactStagingDirectory)\staging\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc"
    - task: CmdLine@2
      displayName: 'Add Drop PGP Signatures (real sign only)'
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        failOnStderr: true
        script: |
          move "$(Build.BinariesDirectory)\vcpkg-glibc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-glibc.sig"
          move "$(Build.BinariesDirectory)\vcpkg-muslc" "$(Build.ArtifactStagingDirectory)\drop\vcpkg-muslc.sig"
    # Do final compliance checks.
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
      displayName: Check for compliance errors
      # To avoid spurious warnings about missing logs, explicitly declare what we scanned.
      inputs:
        CredScan: true
        PoliCheck: true
    # Trust Services Automation (TSA) can automatically open bugs for compliance issues.
    # https://www.1eswiki.com/wiki/Trust_Services_Automation_(TSA)
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
      displayName: Upload logs to TSA
      inputs:
        tsaVersion: TsaV2
        codebase: NewOrUpdate
        codeBaseName: vcpkg-ce
        notificationAlias: embeddeddev@microsoft.com
        instanceUrlForTsaV2: DEVDIV
        projectNameDEVDIV: DevDiv
        areaPath: DevDiv\Cpp Developer Experience\Cross Platform\Embedded
        iterationPath: DevDiv
        # To avoid spurious warnings about missing logs, explicitly declare what we don't upload.
        uploadAPIScan: false
        uploadBinSkim: false
        uploadFortifySCA: false
        uploadFxCop: false
        uploadModernCop: false
        uploadPREfast: false
        uploadRoslyn: false
        uploadTSLint: false
      condition: eq(variables['Build.SourceBranchName'], 'main')
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Drop'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\drop'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
    - task: DownloadSecureFile@1
      displayName: Download Deploy Key
      name: githubDeployKey
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        secureFile: id_vcpkg_tool
    # GitHub has a large, regularly changing set of IP address, so ignore the
    # hostname and allow anything with the right key.
    # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/about-githubs-ip-addresses
    # This public key should have the well-known fingerprint documented below.
    # SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
    # https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints
    - script: mkdir %USERPROFILE%\.ssh && echo * ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==>>%USERPROFILE%\.ssh\known_hosts
      displayName: Store GitHub Public Key
      condition: and(eq(variables.SignType, 'real'), succeeded())
    - script: git -c user.email=embeddedbot@microsoft.com -c user.name="Embedded Bot" push git@github.com:microsoft/vcpkg-tool HEAD:refs/tags/%VCPKG_BASE_VERSION%
      condition: and(eq(variables.SignType, 'real'), succeeded())
      env:
        GIT_SSH_COMMAND: ssh -i "$(githubDeployKey.secureFilePath)"
      displayName: Push Release Tag
    - task: GitHubRelease@0
      displayName: Publish GitHub Release
      condition: and(eq(variables.SignType, 'real'), succeeded())
      inputs:
        gitHubConnection: embeddedbot
        repositoryName: microsoft/vcpkg-tool
        isPreRelease: true
        isDraft: true
        title: $(VCPKG_BASE_VERSION) Release
        tagSource: manual
        tag: $(VCPKG_BASE_VERSION)
        assets: "$(Build.ArtifactStagingDirectory)\\drop\\*"
        addChangeLog: true
        compareWith: 'lastFullRelease'
    - task: MicroBuildCleanup@1
      condition: succeededOrFailed()
      displayName: MicroBuild Cleanup
